{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayod\\\\OneDrive\\\\Desktop\\\\FinalCode\\\\feelsflow\\\\src\\\\components\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MoodForm from './MoodForm';\nimport MoodList from './MoodList';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoodTracker() {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [moods, setMoods] = useState([]);\n  const [isTodayMoodLogged, setIsTodayMoodLogged] = useState(false);\n  const [isLoggingAllowed, setIsLoggingAllowed] = useState(false);\n\n  // Helper function to check if the date is today\n  const isToday = date => {\n    const today = new Date();\n    return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();\n  };\n  const isPastOrToday = date => {\n    const today = new Date();\n    return date <= today;\n  };\n  useEffect(() => {\n    const fetchMoods = async () => {\n      if (isPastOrToday(selectedDate)) {\n        try {\n          const response = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\n          setMoods(response.data);\n          setIsTodayMoodLogged(response.data.length > 0 && isToday(selectedDate));\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    };\n\n    // Determine if logging is allowed for the selected date\n    setIsLoggingAllowed(isToday(selectedDate));\n\n    // Fetch moods whenever the selected date changes\n    fetchMoods();\n  }, [selectedDate]);\n  const handleMoodSubmit = async newMood => {\n    if (!isToday(selectedDate)) {\n      alert(\"You can only log a mood for today.\");\n      return;\n    }\n    try {\n      await axios.post('http://localhost:5000/api/moods', {\n        ...newMood,\n        date: selectedDate\n      });\n      setMoods([...moods, newMood]);\n      setIsTodayMoodLogged(true);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-picker-container\",\n      children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: selectedDate,\n        onChange: date => setSelectedDate(date),\n        inline: true,\n        maxDate: new Date() // Disable future dates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), isToday(selectedDate) && !isTodayMoodLogged && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsTodayMoodLogged(false),\n        children: \"Log New Mood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-list\",\n      children: moods.length > 0 ? /*#__PURE__*/_jsxDEV(MoodList, {\n        moods: moods\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No mood logged for this day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(MoodTracker, \"D1Ug40RpcIkAmnmVU7oeUDF44VY=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","MoodList","DatePicker","jsxDEV","_jsxDEV","MoodTracker","_s","selectedDate","setSelectedDate","Date","moods","setMoods","isTodayMoodLogged","setIsTodayMoodLogged","isLoggingAllowed","setIsLoggingAllowed","isToday","date","today","getDate","getMonth","getFullYear","isPastOrToday","fetchMoods","response","get","toISOString","split","data","length","error","console","handleMoodSubmit","newMood","alert","post","className","children","selected","onChange","inline","maxDate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/sayod/OneDrive/Desktop/FinalCode/feelsflow/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MoodForm from './MoodForm';\r\nimport MoodList from './MoodList';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nfunction MoodTracker() {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [moods, setMoods] = useState([]);\r\n    const [isTodayMoodLogged, setIsTodayMoodLogged] = useState(false);\r\n    const [isLoggingAllowed, setIsLoggingAllowed] = useState(false);\r\n\r\n    // Helper function to check if the date is today\r\n    const isToday = (date) => {\r\n        const today = new Date();\r\n        return date.getDate() === today.getDate() &&\r\n            date.getMonth() === today.getMonth() &&\r\n            date.getFullYear() === today.getFullYear();\r\n    };\r\n\r\n    const isPastOrToday = (date) => {\r\n        const today = new Date();\r\n        return date <= today;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchMoods = async () => {\r\n            if (isPastOrToday(selectedDate)) {\r\n                try {\r\n                    const response = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\r\n                    setMoods(response.data);\r\n                    setIsTodayMoodLogged(response.data.length > 0 && isToday(selectedDate));\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        };\r\n\r\n        // Determine if logging is allowed for the selected date\r\n        setIsLoggingAllowed(isToday(selectedDate));\r\n\r\n        // Fetch moods whenever the selected date changes\r\n        fetchMoods();\r\n    }, [selectedDate]);\r\n\r\n    const handleMoodSubmit = async (newMood) => {\r\n        if (!isToday(selectedDate)) {\r\n            alert(\"You can only log a mood for today.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            await axios.post('http://localhost:5000/api/moods', { ...newMood, date: selectedDate });\r\n            setMoods([...moods, newMood]);\r\n            setIsTodayMoodLogged(true);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mood-tracker-container\">\r\n            {/* Left Section: Calendar */}\r\n            <div className=\"date-picker-container\">\r\n                <DatePicker\r\n                    selected={selectedDate}\r\n                    onChange={(date) => setSelectedDate(date)}\r\n                    inline\r\n                    maxDate={new Date()}  // Disable future dates\r\n                />\r\n                {isToday(selectedDate) && !isTodayMoodLogged && (\r\n                    <button onClick={() => setIsTodayMoodLogged(false)}>\r\n                        Log New Mood\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            {/* Right Section: Mood Display */}\r\n            <div className=\"mood-list\">\r\n                {moods.length > 0 ? (\r\n                    <MoodList moods={moods} />\r\n                ) : (\r\n                    <p>No mood logged for this day</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoodTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}