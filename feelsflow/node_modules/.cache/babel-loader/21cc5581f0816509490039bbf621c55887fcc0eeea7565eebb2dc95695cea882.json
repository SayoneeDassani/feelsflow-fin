{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayod\\\\OneDrive\\\\Desktop\\\\FinalCode\\\\feelsflow\\\\src\\\\components\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MoodForm from './MoodForm';\nimport MoodList from './MoodList';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoodTracker() {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date()); // Track selected date\n  const [moods, setMoods] = useState([]); // Store moods for the selected date\n  const [showForm, setShowForm] = useState(false); // Show or hide the mood form\n\n  // Fetch moods for the selected date whenever the date changes\n  useEffect(() => {\n    const fetchMoods = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\n        setMoods(response.data); // Store the moods in state\n      } catch (error) {\n        console.error('Error fetching moods:', error);\n      }\n    };\n    fetchMoods();\n  }, [selectedDate]);\n\n  // Handle mood submission from the form\n  const handleMoodSubmit = async newMood => {\n    try {\n      // Make a POST request to submit the new mood\n      const response = await axios.post('http://localhost:5000/api/moods', {\n        mood: newMood.mood,\n        description: newMood.description,\n        date: selectedDate.toISOString().split('T')[0] // Format the date as YYYY-MM-DD\n      });\n      console.log('Response from server:', response.data); // Debug log\n\n      // Fetch updated moods after logging the new mood\n      const updatedMoods = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\n      setMoods(updatedMoods.data); // Update the moods list with the newly logged mood\n\n      setShowForm(false); // Close the form after submission\n    } catch (error) {\n      console.error('Error logging mood:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-picker-container\",\n      children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: selectedDate,\n        onChange: date => setSelectedDate(date) // Update the selected date\n        ,\n        inline: true,\n        maxDate: new Date() // Disable future dates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), !showForm && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowForm(true),\n        children: \"Log New Mood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-list\",\n      children: [moods.length > 0 ? /*#__PURE__*/_jsxDEV(MoodList, {\n        moods: moods\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this) // Display the moods\n      : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No mood logged for this day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this) // Message when no mood is logged for the day\n      , showForm && /*#__PURE__*/_jsxDEV(MoodForm, {\n        onMoodSubmit: handleMoodSubmit // Pass the handleMoodSubmit function to the form\n        ,\n        onCancel: () => setShowForm(false) // Close form when \"Cancel\" is clicked\n        ,\n        selectedDate: selectedDate // Pass the selected date to the form\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(MoodTracker, \"LMKR7kYORlP3sAlKy+eU0mNqrXk=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","MoodList","DatePicker","jsxDEV","_jsxDEV","MoodTracker","_s","selectedDate","setSelectedDate","Date","moods","setMoods","showForm","setShowForm","fetchMoods","response","get","toISOString","split","data","error","console","handleMoodSubmit","newMood","post","mood","description","date","log","updatedMoods","className","children","selected","onChange","inline","maxDate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","onMoodSubmit","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/sayod/OneDrive/Desktop/FinalCode/feelsflow/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MoodForm from './MoodForm';\r\nimport MoodList from './MoodList';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nfunction MoodTracker() {\r\n    const [selectedDate, setSelectedDate] = useState(new Date()); // Track selected date\r\n    const [moods, setMoods] = useState([]); // Store moods for the selected date\r\n    const [showForm, setShowForm] = useState(false); // Show or hide the mood form\r\n\r\n    // Fetch moods for the selected date whenever the date changes\r\n    useEffect(() => {\r\n        const fetchMoods = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\r\n                setMoods(response.data); // Store the moods in state\r\n            } catch (error) {\r\n                console.error('Error fetching moods:', error);\r\n            }\r\n        };\r\n\r\n        fetchMoods();\r\n    }, [selectedDate]);\r\n\r\n    // Handle mood submission from the form\r\n    const handleMoodSubmit = async (newMood) => {\r\n        try {\r\n            // Make a POST request to submit the new mood\r\n            const response = await axios.post('http://localhost:5000/api/moods', {\r\n                mood: newMood.mood,\r\n                description: newMood.description,\r\n                date: selectedDate.toISOString().split('T')[0] // Format the date as YYYY-MM-DD\r\n            });\r\n\r\n            console.log('Response from server:', response.data); // Debug log\r\n\r\n            // Fetch updated moods after logging the new mood\r\n            const updatedMoods = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\r\n            setMoods(updatedMoods.data); // Update the moods list with the newly logged mood\r\n\r\n            setShowForm(false); // Close the form after submission\r\n        } catch (error) {\r\n            console.error('Error logging mood:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mood-tracker-container\">\r\n            {/* Left Section: Date picker */}\r\n            <div className=\"date-picker-container\">\r\n                <DatePicker\r\n                    selected={selectedDate}\r\n                    onChange={(date) => setSelectedDate(date)} // Update the selected date\r\n                    inline\r\n                    maxDate={new Date()} // Disable future dates\r\n                />\r\n                {/* Show \"Log New Mood\" button when form is not visible */}\r\n                {!showForm && (\r\n                    <button onClick={() => setShowForm(true)}>\r\n                        Log New Mood\r\n                    </button>\r\n                )}\r\n            </div>\r\n\r\n            {/* Right Section: Display mood list or no data message */}\r\n            <div className=\"mood-list\">\r\n                {moods.length > 0 ? (\r\n                    <MoodList moods={moods} /> // Display the moods\r\n                ) : (\r\n                    <p>No mood logged for this day</p> // Message when no mood is logged for the day\r\n                )}\r\n\r\n                {/* Display the form when \"Log New Mood\" is clicked */}\r\n                {showForm && (\r\n                    <MoodForm\r\n                        onMoodSubmit={handleMoodSubmit} // Pass the handleMoodSubmit function to the form\r\n                        onCancel={() => setShowForm(false)} // Close form when \"Cancel\" is clicked\r\n                        selectedDate={selectedDate} // Pass the selected date to the form\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoodTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}