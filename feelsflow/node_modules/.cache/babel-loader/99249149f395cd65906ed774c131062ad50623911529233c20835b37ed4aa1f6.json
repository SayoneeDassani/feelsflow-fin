{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sayod\\\\OneDrive\\\\Desktop\\\\FinalCode\\\\feelsflow\\\\src\\\\components\\\\MoodTracker.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport MoodForm from './MoodForm';\nimport MoodList from './MoodList';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MoodTracker() {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [moods, setMoods] = useState([]);\n  const [showForm, setShowForm] = useState(false); // Manage form visibility\n\n  useEffect(() => {\n    const fetchMoods = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\n        setMoods(response.data);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchMoods();\n  }, [selectedDate]);\n  const handleMoodSubmit = async newMood => {\n    try {\n      await axios.post('http://localhost:5000/api/moods', {\n        ...newMood,\n        date: selectedDate\n      });\n      setMoods([...moods, newMood]);\n      setShowForm(false); // Close the form after submission\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mood-tracker-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-picker-container\",\n      children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n        selected: selectedDate,\n        onChange: date => setSelectedDate(date),\n        inline: true,\n        maxDate: new Date() // Disable future dates\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), !showForm && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowForm(true),\n        children: \"Log New Mood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mood-list\",\n      children: [moods.length > 0 ? /*#__PURE__*/_jsxDEV(MoodList, {\n        moods: moods\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No mood logged for this day\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), showForm && /*#__PURE__*/_jsxDEV(MoodForm, {\n        onMoodSubmit: handleMoodSubmit,\n        onCancel: () => setShowForm(false) // Hide form when cancelled\n        ,\n        selectedDate: selectedDate // Pass the selectedDate prop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n_s(MoodTracker, \"LMKR7kYORlP3sAlKy+eU0mNqrXk=\");\n_c = MoodTracker;\nexport default MoodTracker;\nvar _c;\n$RefreshReg$(_c, \"MoodTracker\");","map":{"version":3,"names":["React","useState","useEffect","axios","MoodForm","MoodList","DatePicker","jsxDEV","_jsxDEV","MoodTracker","_s","selectedDate","setSelectedDate","Date","moods","setMoods","showForm","setShowForm","fetchMoods","response","get","toISOString","split","data","error","console","handleMoodSubmit","newMood","post","date","className","children","selected","onChange","inline","maxDate","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","onMoodSubmit","onCancel","_c","$RefreshReg$"],"sources":["C:/Users/sayod/OneDrive/Desktop/FinalCode/feelsflow/src/components/MoodTracker.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport MoodForm from './MoodForm';\r\nimport MoodList from './MoodList';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nfunction MoodTracker() {\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [moods, setMoods] = useState([]);\r\n    const [showForm, setShowForm] = useState(false); // Manage form visibility\r\n\r\n    useEffect(() => {\r\n        const fetchMoods = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\r\n                setMoods(response.data);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchMoods();\r\n    }, [selectedDate]);\r\n\r\n    const handleMoodSubmit = async (newMood) => {\r\n        try {\r\n            await axios.post('http://localhost:5000/api/moods', { ...newMood, date: selectedDate });\r\n            setMoods([...moods, newMood]);\r\n            setShowForm(false); // Close the form after submission\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"mood-tracker-container\">\r\n            {/* Left Section: Calendar */}\r\n            <div className=\"date-picker-container\">\r\n                <DatePicker\r\n                    selected={selectedDate}\r\n                    onChange={(date) => setSelectedDate(date)}\r\n                    inline\r\n                    maxDate={new Date()}  // Disable future dates\r\n                />\r\n                {/* Toggle Form Visibility */}\r\n                {!showForm && (\r\n                    <button onClick={() => setShowForm(true)}>\r\n                        Log New Mood\r\n                    </button>\r\n                )}\r\n            </div>\r\n            \r\n            {/* Right Section: Mood Display */}\r\n            <div className=\"mood-list\">\r\n                {moods.length > 0 ? (\r\n                    <MoodList moods={moods} />\r\n                ) : (\r\n                    <p>No mood logged for this day</p>\r\n                )}\r\n\r\n                {/* Show the form when \"Log New Mood\" is clicked */}\r\n                {showForm && (\r\n                    <MoodForm\r\n                        onMoodSubmit={handleMoodSubmit}\r\n                        onCancel={() => setShowForm(false)} // Hide form when cancelled\r\n                        selectedDate={selectedDate}  // Pass the selectedDate prop\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoodTracker;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}