{"ast":null,"code":"const handleMoodSubmit = async newMood => {\n  try {\n    // Ensure the POST request is properly formatted\n    const response = await axios.post('http://localhost:5000/api/moods', {\n      mood: newMood.mood,\n      description: newMood.description,\n      date: selectedDate.toISOString().split('T')[0] // Pass the date in 'YYYY-MM-DD' format\n    });\n    console.log('Response from server:', response.data); // Debugging log\n\n    // Fetch updated moods after the new mood is logged\n    const updatedMoods = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\n    setMoods(updatedMoods.data); // Update the UI with the new moods\n    setShowForm(false); // Close the form after submission\n  } catch (error) {\n    console.error('Error logging mood:', error);\n  }\n};","map":{"version":3,"names":["handleMoodSubmit","newMood","response","axios","post","mood","description","date","selectedDate","toISOString","split","console","log","data","updatedMoods","get","setMoods","setShowForm","error"],"sources":["C:/Users/sayod/OneDrive/Desktop/FinalCode/feelsflow/src/components/MoodTracker.js"],"sourcesContent":["const handleMoodSubmit = async (newMood) => {\r\n    try {\r\n        // Ensure the POST request is properly formatted\r\n        const response = await axios.post('http://localhost:5000/api/moods', {\r\n            mood: newMood.mood,\r\n            description: newMood.description,\r\n            date: selectedDate.toISOString().split('T')[0] // Pass the date in 'YYYY-MM-DD' format\r\n        });\r\n\r\n        console.log('Response from server:', response.data); // Debugging log\r\n\r\n        // Fetch updated moods after the new mood is logged\r\n        const updatedMoods = await axios.get(`http://localhost:5000/api/moods/${selectedDate.toISOString().split('T')[0]}`);\r\n        setMoods(updatedMoods.data); // Update the UI with the new moods\r\n        setShowForm(false); // Close the form after submission\r\n    } catch (error) {\r\n        console.error('Error logging mood:', error);\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAOC,OAAO,IAAK;EACxC,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,iCAAiC,EAAE;MACjEC,IAAI,EAAEJ,OAAO,CAACI,IAAI;MAClBC,WAAW,EAAEL,OAAO,CAACK,WAAW;MAChCC,IAAI,EAAEC,YAAY,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACnD,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC;;IAErD;IACA,MAAMC,YAAY,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,mCAAmCP,YAAY,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnHM,QAAQ,CAACF,YAAY,CAACD,IAAI,CAAC,CAAC,CAAC;IAC7BI,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;EAC/C;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}